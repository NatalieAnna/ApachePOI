// 5.12.17 to update: skip first row (prevent printed "Well Sample Melt Temp")
// FileOutputStream to export data to new spreadsheet
// note: must be .xls

package com.mycompany.app;

import java.io.File;
import java.io.FileInputStream;
//import java.io.FileNotFoundException;
import java.io.FileOutputStream;
// import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
//import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
//import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.hssf.util.CellReference;
//import org.apache.poi.ss.usermodel.*;

public class App {
	
		public static void output() throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		    HSSFSheet sheet1 = wb.getSheetAt(0);
   		    DataFormatter dataFormatter = new DataFormatter();

		    for (Row row : sheet1) {
		        for (Cell cell : row) {
		            CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());
		            System.out.print(cellRef.formatAsString());
		           System.out.print(": ");

	            // get the value and format it yourself
		            switch (cell.getCellType()) {
		                case HSSFCell.CELL_TYPE_STRING:
		                     System.out.print(cell.getRichStringCellValue().getString());
		                     break;
		                case HSSFCell.CELL_TYPE_NUMERIC:
		                     System.out.print(cell.getNumericCellValue());
		                     break;
		                case HSSFCell.CELL_TYPE_BLANK:
		                     System.out.print(" BLANK ");
		                     break;
		                default:
		                     System.out.print("");
		            }
		            System.out.println();
		        
		            // Prints out cell value as per standard excel reference ie A12
		            CellReference ref = new CellReference("F3");
		            Row r = sheet1.getRow(ref.getRow());
		            if (r != null) {
		               Cell c = r.getCell(ref.getCol());
		               System.out.println("Selection: " + c);
		               
		            // conditional IF String
		            String dfC = dataFormatter.formatCellValue(c);
		            if ( dfC.equals("None") )  System.out.println("Equals none? " + c);
		            else System.out.println("=/ none");
		            }
		        
		            // another excel reference
		            CellReference ref1 = new CellReference("F5");
		            Row r1 = sheet1.getRow(ref1.getRow());
		            if (r1 != null) {
		               Cell c1 = r1.getCell(ref1.getCol());
		               System.out.println("Selection: " + c1);
		               
		            // conditional IF number
		            double dfC1 = c1.getNumericCellValue();
		            if ( dfC1 < 52 ) System.out.println("Is " + c1 + " > 52? Yes.");
		            else System.out.println("Not > 52.");
		            }
		        }
			}
		
			ExcelFileToRead.close();
			FileOutputStream out = new FileOutputStream(new File("/home/nat/x1/src/main/java/com/mycompany/app/output.xls"));
			wb.write(out);
			out.close();
		}
		
		public static void main(String[] args) throws IOException {
			System.out.println("WELL " + "SAMPLE " + "Cy5 (104K)");
			output();
		}

}
