package com.mycompany.app;

import java.io.File;
import java.io.FileInputStream;
//import java.io.FileNotFoundException;
import java.io.FileOutputStream;
// import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
//import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.hssf.util.CellReference;
//import org.apache.poi.ss.usermodel.*;

public class App {
	
/*		private static void output() throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		   // HSSFSheet sheet1 = wb.getSheetAt(0);
   		   // DataFormatter dataFormatter = new DataFormatter();

			// *** FOR LOOP ***
			
   		    cy5("B2");
   		    well("A2");
   		    sample("E2");
   		    cy5result("F2");
  
   		    cy5("B5");
   		    well("A5");
   		    sample("E5");
   		    cy5result("F5");
		            
			ExcelFileToRead.close();
			FileOutputStream out = new FileOutputStream(new File("/home/nat/x1/src/main/java/com/mycompany/app/output.xls"));
			wb.write(out);
			out.close();
		}
		
		private static void well(String cr) throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		    HSSFSheet sheet1 = wb.getSheetAt(0);
   		    //DataFormatter dataFormatter = new DataFormatter();
		
		            // gets Cy5 from Excel reference
		            CellReference ref = new CellReference(cr);
		            Row r = sheet1.getRow(ref.getRow());
		            if (r != null) {
		               Cell c = r.getCell(ref.getCol());
		               
		            // conditional IF (String)
		           // String dfC = dataFormatter.formatCellValue(c);
		            System.out.print(" " + c);
		            }
		}
		
		private static void sample(String cr) throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		    HSSFSheet sheet1 = wb.getSheetAt(0);
		    
		            // gets MeltTemp from Excel reference
		            CellReference ref1 = new CellReference(cr);
		            Row r1 = sheet1.getRow(ref1.getRow());
		            if (r1 != null) {
		               Cell c1 = r1.getCell(ref1.getCol());
		              
						if (c1.getCellType() == HSSFCell.CELL_TYPE_STRING) 
						{
							System.out.print(" Error ");
							//System.out.print(c1.getStringCellValue()+" ");
						} 
						else if (c1.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)
						{
							System.out.print(" " + c1.getNumericCellValue());
						}
						else
						{
							System.out.print(" - ");
						}
						System.out.print("");
		            }
		}
		
		private static void cy5(String cr) throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		    HSSFSheet sheet1 = wb.getSheetAt(0);
   		    DataFormatter dataFormatter = new DataFormatter();
		
		            // gets Cy5 from Excel reference
		            CellReference ref = new CellReference(cr);
		            Row r = sheet1.getRow(ref.getRow());
		            if (r != null) {
		               Cell c = r.getCell(ref.getCol());
		               
		            // conditional IF (String)
		            String dfC = dataFormatter.formatCellValue(c);
		            if ( dfC.equals("Cy5") )  System.out.print("Cy5/" + c);
		            else System.out.print("Not Cy5! ");
		            }
		}

		private static void cy5result(String cr) throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
		    HSSFSheet sheet1 = wb.getSheetAt(0);
		    
		            // gets MeltTemp from Excel reference
		            CellReference ref1 = new CellReference(cr);
		            Row r1 = sheet1.getRow(ref1.getRow());
		            if (r1 != null) {
		               Cell c1 = r1.getCell(ref1.getCol());
		              
						if (c1.getCellType() == HSSFCell.CELL_TYPE_STRING) 
						{
							System.out.print(" Neg ");
							//System.out.print(c1.getStringCellValue()+" ");
						} 
						else if (c1.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)
						{
							if (c1.getNumericCellValue() < 52) 
								System.out.print(" 104K");
							else 
								System.out.print(" Error");
						}
						else
						{
							System.out.print(" - ");
						}
						System.out.println("");
		            // conditional IF number
//		            double dfC1 = c1.getNumericCellValue();
//		            if ( dfC1 < 52 ) System.out.println(c1 + " < 52? > Yes!");
//		            else System.out.println("Not < 52.");
		            }
		}
*/
		// can't be string type method because all values become cell type string
		private static String cy5result2(Cell f) throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead); // creates new workbook object using an (input stream)
			HSSFSheet sheet=wb.getSheetAt(0);
			Iterator<Row> rowIterator = sheet.iterator();
			Row row = rowIterator.next();
			//Cell f = row.getCell(5);

            if ( row.getRowNum() == 1 ) { // starts iterating at row 2
            	
				if (f.getCellType() == HSSFCell.CELL_TYPE_STRING) 
				{
					//System.out.print("Neg");
					return "Neg";
				} 
				else if (f.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)
				{
					if (f.getNumericCellValue() > 52) 
						//System.out.print("104K");
						return "104K";
				}
				else
				{
					//System.out.print("-");
					return "-";
				}
            }
			return "return statement";
	    }

		   private static String analysis() throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead); // creates new workbook object using an (input stream)
			HSSFSheet sheet=wb.getSheetAt(0);
			Iterator<Row> rowIterator = sheet.iterator();
			DataFormatter dataFormatter = new DataFormatter();
			
			while ( rowIterator.hasNext() ) {

				Row row = rowIterator.next();
				Cell a = row.getCell(0);
				Cell b = row.getCell(1);
				//Cell c = row.getCell(2);
				//Cell d = row.getCell(3);
				Cell e = row.getCell(4);
				Cell f = row.getCell(5);
				
				//System.out.println(a + " " + b + " " + c + " " + d + " " + e + " " + f);
				
	            String dfA = dataFormatter.formatCellValue(a); // returns the formatted value of a cell as a String regardless of the cell type.
	            String dfB = dataFormatter.formatCellValue(b);
	            //String dfC = dataFormatter.formatCellValue(c);
	            //String dfD = dataFormatter.formatCellValue(d);
	            //String dfE = dataFormatter.formatCellValue(e);
	            //String dfF = dataFormatter.formatCellValue(f);
	            
				if ( dfA.equals("A01") && dfB.equals("Cy5") ) {
					System.out.println(a + " " + b + " " + e + " " + cy5result2(f));
				}	
				if ( dfA.equals("B01") && dfB.equals("Cy5") ) {
					System.out.println(a + " " + b + " " + e + " " + cy5result2(f) );
				}
				if ( dfA.equals("E03") && dfB.equals("Cy5") ) {
					System.out.println(a + " " + b + " " + e + " " + cy5result2(f) );
				}
			}
			return "something";
		}
					
		public static void main(String[] args) throws IOException {
			System.out.println("WELL " + "SAMPLE " + "Cy5(104K)");
//			output();
			analysis();
		}

}
