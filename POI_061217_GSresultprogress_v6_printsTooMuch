// 5.12.17 to update: skip first row (prevent printed "Well Sample Melt Temp")
// FileOutputStream to export data to new spreadsheet
// note: must be .xls

package com.mycompany.app;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
// import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.*;

public class App {
	
		public static void output() throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
			HSSFSheet sheet=wb.getSheetAt(0);
			Iterator<Row> rowIterator = sheet.iterator();
			DataFormatter dataFormatter = new DataFormatter();
		 
			do {
				Row row = rowIterator.next();
				
				// raw data
				Cell GSwell = row.getCell(0);
				Cell GSfluor = row.getCell(1);
				Cell GSsample = row.getCell(4);
				//Cell GSresult = row.getCell(5);
	
				// formatted data
	            String dfGSwell = dataFormatter.formatCellValue(GSwell);
	            String dfGSfluor = dataFormatter.formatCellValue(GSfluor);
	            String dfGSsample = dataFormatter.formatCellValue(GSsample);

	            // if statements
				if ( (dfGSfluor.equals("Cy5")) && (resultEval() < 1) ) { 		//  || dfGstempString.equals("None"))
	            	System.out.println(dfGSwell + " " + dfGSsample + " " + resultEval());
				}
				
	/*			// error
				// Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
				// Cannot invoke equals(String) on the primitive type int
				// try convertUtils()
				if ( (dfGSfluor.equals("Cy5")) && (formulaEvalString(GSresult).equals("None"))) { 		//  || dfGstempString.equals("None"))
	            	System.out.println(dfGSwell + " " + dfGSsample + " None");
				}
	            else if ( (dfGSfluor.equals("Cy5")) && (formulaEvalNumeric()) > 10)) { 		//  || dfGstempString.equals("None"))
	            	System.out.println(dfGSwell + " " + dfGSsample + " 104K");
				}
	*/
			}
				while (rowIterator.hasNext());
			}


		public static double resultEval() throws IOException {
			InputStream ExcelFileToRead = new FileInputStream("/home/nat/x1/src/main/java/com/mycompany/app/data2.xls");
			HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
			HSSFSheet sheet=wb.getSheetAt(0);
			Iterator<Row> rowIterator = sheet.iterator();
			
		 do {
			Row row = rowIterator.next();
			Cell GSresult = row.getCell(5);

			FormulaEvaluator formulaEvaluator = wb.getCreationHelper().createFormulaEvaluator();
            if (GSresult != null) {
		        switch(formulaEvaluator.evaluateInCell(GSresult).getCellType()) {
		        case HSSFCell.CELL_TYPE_NUMERIC:
		        	System.out.println(GSresult.getNumericCellValue());
		        	return GSresult.getNumericCellValue();
		        case HSSFCell.CELL_TYPE_STRING:
		        	GSresult.setCellValue(0);
		        	System.out.println(GSresult.getNumericCellValue());
		        	return GSresult.getNumericCellValue();
		        default:
		            break;
		        }
            }
		}
		while (rowIterator.hasNext());
		return -1;
		}
		
public static void main(String[] args) throws IOException {
		System.out.println("WELL " + "SAMPLE " + "Cy5 (104K)");
		output();
		resultEval();
	}

}
